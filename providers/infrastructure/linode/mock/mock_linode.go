// Code generated by MockGen. DO NOT EDIT.
// Source: providers/infrastructure/linode/linode.go
//
// Generated by this command:
//
//	mockgen-v0.4.0 -destination=providers/infrastructure/linode/mock/mock_linode.go -source=providers/infrastructure/linode/linode.go
//

// Package mock_Linode is a generated GoMock package.
package mock_Linode

import (
	context "context"
	reflect "reflect"

	linodego "github.com/linode/linodego"
	gomock "go.uber.org/mock/gomock"
)

// MockLinodeClient is a mock of LinodeClient interface.
type MockLinodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockLinodeClientMockRecorder
}

// MockLinodeClientMockRecorder is the mock recorder for MockLinodeClient.
type MockLinodeClientMockRecorder struct {
	mock *MockLinodeClient
}

// NewMockLinodeClient creates a new mock instance.
func NewMockLinodeClient(ctrl *gomock.Controller) *MockLinodeClient {
	mock := &MockLinodeClient{ctrl: ctrl}
	mock.recorder = &MockLinodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinodeClient) EXPECT() *MockLinodeClientMockRecorder {
	return m.recorder
}

// CreateInstance mocks base method.
func (m *MockLinodeClient) CreateInstance(ctx context.Context, opts linodego.InstanceCreateOptions) (*linodego.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", ctx, opts)
	ret0, _ := ret[0].(*linodego.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockLinodeClientMockRecorder) CreateInstance(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockLinodeClient)(nil).CreateInstance), ctx, opts)
}

// CreateNodeBalancer mocks base method.
func (m *MockLinodeClient) CreateNodeBalancer(ctx context.Context, opts linodego.NodeBalancerCreateOptions) (*linodego.NodeBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeBalancer", ctx, opts)
	ret0, _ := ret[0].(*linodego.NodeBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeBalancer indicates an expected call of CreateNodeBalancer.
func (mr *MockLinodeClientMockRecorder) CreateNodeBalancer(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeBalancer", reflect.TypeOf((*MockLinodeClient)(nil).CreateNodeBalancer), ctx, opts)
}

// CreateNodeBalancerConfig mocks base method.
func (m *MockLinodeClient) CreateNodeBalancerConfig(ctx context.Context, nodebalancerID int, opts linodego.NodeBalancerConfigCreateOptions) (*linodego.NodeBalancerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeBalancerConfig", ctx, nodebalancerID, opts)
	ret0, _ := ret[0].(*linodego.NodeBalancerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeBalancerConfig indicates an expected call of CreateNodeBalancerConfig.
func (mr *MockLinodeClientMockRecorder) CreateNodeBalancerConfig(ctx, nodebalancerID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeBalancerConfig", reflect.TypeOf((*MockLinodeClient)(nil).CreateNodeBalancerConfig), ctx, nodebalancerID, opts)
}

// CreateNodeBalancerNode mocks base method.
func (m *MockLinodeClient) CreateNodeBalancerNode(ctx context.Context, nodebalancerID, configID int, opts linodego.NodeBalancerNodeCreateOptions) (*linodego.NodeBalancerNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodeBalancerNode", ctx, nodebalancerID, configID, opts)
	ret0, _ := ret[0].(*linodego.NodeBalancerNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeBalancerNode indicates an expected call of CreateNodeBalancerNode.
func (mr *MockLinodeClientMockRecorder) CreateNodeBalancerNode(ctx, nodebalancerID, configID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeBalancerNode", reflect.TypeOf((*MockLinodeClient)(nil).CreateNodeBalancerNode), ctx, nodebalancerID, configID, opts)
}

// CreateVPC mocks base method.
func (m *MockLinodeClient) CreateVPC(ctx context.Context, opts linodego.VPCCreateOptions) (*linodego.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVPC", ctx, opts)
	ret0, _ := ret[0].(*linodego.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVPC indicates an expected call of CreateVPC.
func (mr *MockLinodeClientMockRecorder) CreateVPC(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVPC", reflect.TypeOf((*MockLinodeClient)(nil).CreateVPC), ctx, opts)
}

// DeleteInstance mocks base method.
func (m *MockLinodeClient) DeleteInstance(ctx context.Context, linodeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", ctx, linodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockLinodeClientMockRecorder) DeleteInstance(ctx, linodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockLinodeClient)(nil).DeleteInstance), ctx, linodeID)
}

// DeleteNodeBalancer mocks base method.
func (m *MockLinodeClient) DeleteNodeBalancer(ctx context.Context, nodebalancerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeBalancer", ctx, nodebalancerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeBalancer indicates an expected call of DeleteNodeBalancer.
func (mr *MockLinodeClientMockRecorder) DeleteNodeBalancer(ctx, nodebalancerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeBalancer", reflect.TypeOf((*MockLinodeClient)(nil).DeleteNodeBalancer), ctx, nodebalancerID)
}

// DeleteVPC mocks base method.
func (m *MockLinodeClient) DeleteVPC(ctx context.Context, vpcID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVPC", ctx, vpcID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVPC indicates an expected call of DeleteVPC.
func (mr *MockLinodeClientMockRecorder) DeleteVPC(ctx, vpcID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVPC", reflect.TypeOf((*MockLinodeClient)(nil).DeleteVPC), ctx, vpcID)
}

// ListInstances mocks base method.
func (m *MockLinodeClient) ListInstances(ctx context.Context, opts *linodego.ListOptions) ([]linodego.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", ctx, opts)
	ret0, _ := ret[0].([]linodego.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockLinodeClientMockRecorder) ListInstances(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockLinodeClient)(nil).ListInstances), ctx, opts)
}

// ListNodeBalancers mocks base method.
func (m *MockLinodeClient) ListNodeBalancers(ctx context.Context, opts *linodego.ListOptions) ([]linodego.NodeBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodeBalancers", ctx, opts)
	ret0, _ := ret[0].([]linodego.NodeBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodeBalancers indicates an expected call of ListNodeBalancers.
func (mr *MockLinodeClientMockRecorder) ListNodeBalancers(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeBalancers", reflect.TypeOf((*MockLinodeClient)(nil).ListNodeBalancers), ctx, opts)
}

// ListVPCs mocks base method.
func (m *MockLinodeClient) ListVPCs(ctx context.Context, opts *linodego.ListOptions) ([]linodego.VPC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVPCs", ctx, opts)
	ret0, _ := ret[0].([]linodego.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVPCs indicates an expected call of ListVPCs.
func (mr *MockLinodeClientMockRecorder) ListVPCs(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVPCs", reflect.TypeOf((*MockLinodeClient)(nil).ListVPCs), ctx, opts)
}
