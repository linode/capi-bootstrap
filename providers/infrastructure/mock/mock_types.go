// Code generated by MockGen. DO NOT EDIT.
// Source: providers/infrastructure/types.go
//
// Generated by this command:
//
//	mockgen-v0.4.0 -destination=providers/infrastructure/mock/mock_types.go -source=providers/infrastructure/types.go
//

// Package mock_infrastructure is a generated GoMock package.
package mock_infrastructure

import (
	context "context"
	reflect "reflect"

	types "capi-bootstrap/types"
	yaml "capi-bootstrap/yaml"

	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProvider) Delete(ctx context.Context, values *types.Values, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, values, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProviderMockRecorder) Delete(ctx, values, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProvider)(nil).Delete), ctx, values, force)
}

// Deploy mocks base method.
func (m *MockProvider) Deploy(ctx context.Context, values *types.Values, metadata []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", ctx, values, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockProviderMockRecorder) Deploy(ctx, values, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockProvider)(nil).Deploy), ctx, values, metadata)
}

// GenerateAdditionalFiles mocks base method.
func (m *MockProvider) GenerateAdditionalFiles(ctx context.Context, values *types.Values) ([]yaml.InitFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAdditionalFiles", ctx, values)
	ret0, _ := ret[0].([]yaml.InitFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAdditionalFiles indicates an expected call of GenerateAdditionalFiles.
func (mr *MockProviderMockRecorder) GenerateAdditionalFiles(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAdditionalFiles", reflect.TypeOf((*MockProvider)(nil).GenerateAdditionalFiles), ctx, values)
}

// GenerateCapiFile mocks base method.
func (m *MockProvider) GenerateCapiFile(ctx context.Context, values *types.Values) (*yaml.InitFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCapiFile", ctx, values)
	ret0, _ := ret[0].(*yaml.InitFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCapiFile indicates an expected call of GenerateCapiFile.
func (mr *MockProviderMockRecorder) GenerateCapiFile(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCapiFile", reflect.TypeOf((*MockProvider)(nil).GenerateCapiFile), ctx, values)
}

// GenerateCapiMachine mocks base method.
func (m *MockProvider) GenerateCapiMachine(ctx context.Context, values *types.Values) (*yaml.InitFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCapiMachine", ctx, values)
	ret0, _ := ret[0].(*yaml.InitFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCapiMachine indicates an expected call of GenerateCapiMachine.
func (mr *MockProviderMockRecorder) GenerateCapiMachine(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCapiMachine", reflect.TypeOf((*MockProvider)(nil).GenerateCapiMachine), ctx, values)
}

// PostDeploy mocks base method.
func (m *MockProvider) PostDeploy(ctx context.Context, values *types.Values) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostDeploy", ctx, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDeploy indicates an expected call of PostDeploy.
func (mr *MockProviderMockRecorder) PostDeploy(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDeploy", reflect.TypeOf((*MockProvider)(nil).PostDeploy), ctx, values)
}

// PreCmd mocks base method.
func (m *MockProvider) PreCmd(ctx context.Context, values *types.Values) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreCmd", ctx, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreCmd indicates an expected call of PreCmd.
func (mr *MockProviderMockRecorder) PreCmd(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreCmd", reflect.TypeOf((*MockProvider)(nil).PreCmd), ctx, values)
}

// PreDeploy mocks base method.
func (m *MockProvider) PreDeploy(ctx context.Context, values *types.Values) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreDeploy", ctx, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreDeploy indicates an expected call of PreDeploy.
func (mr *MockProviderMockRecorder) PreDeploy(ctx, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreDeploy", reflect.TypeOf((*MockProvider)(nil).PreDeploy), ctx, values)
}

// UpdateManifests mocks base method.
func (m *MockProvider) UpdateManifests(ctx context.Context, manifests []string, values *types.Values) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManifests", ctx, manifests, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateManifests indicates an expected call of UpdateManifests.
func (mr *MockProviderMockRecorder) UpdateManifests(ctx, manifests, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManifests", reflect.TypeOf((*MockProvider)(nil).UpdateManifests), ctx, manifests, values)
}
