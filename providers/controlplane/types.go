package controlplane

import (
	"context"

	"capi-bootstrap/types"
	capiYaml "capi-bootstrap/yaml"
)

type Provider interface {
	// GenerateCapiFile generates the CAPI controllers manifests needed to install an ControlPlane Provider
	GenerateCapiFile(ctx context.Context, values *types.Values) (*capiYaml.InitFile, error)
	// GenerateInitScript generates init script needed to install an ControlPlaneProvider
	GenerateInitScript(ctx context.Context, initScriptPath string, values *types.Values) (*capiYaml.InitFile, error)
	// GenerateRunCommand generates run commands necessary to install a control plane ControlPlane Provider
	GenerateRunCommand(ctx context.Context, values *types.Values) ([]string, error)
	// GenerateAdditionalFiles generates any additional manifests that might be necessary for the ControlPlane Provider
	GenerateAdditionalFiles(ctx context.Context, values *types.Values) ([]capiYaml.InitFile, error)
	// UpdateManifests parses and updates any manifests needed to by the Provider
	UpdateManifests(ctx context.Context, manifests []string, values *types.Values) (*capiYaml.ParsedManifest, error)
	// PreDeploy takes in a common substitutions struct, does any setup needed to deploy a CAPI cluster and updates
	// the substitutions struct with any values needed by the ControlPlane Provider
	PreDeploy(ctx context.Context, values *types.Values) error
	// GetControlPlaneCertSecret generates SecretList based on the certs generated by a controlPlane Provider
	// and writes that secret to a file in the BootstrapManifestDir
	GetControlPlaneCertSecret(ctx context.Context, values *types.Values) (*capiYaml.InitFile, error)
	// GetControlPlaneCertFiles generates cert files generated by a controlPlane Provider and creates a cloud init command
	// to place them at their correct locations
	GetControlPlaneCertFiles(ctx context.Context) ([]capiYaml.InitFile, error)
	// GetKubeconfig gets the kubeconfig based on the certificates generated by the controlPlane Provider
	// and writes it to a Secret file to be used by CAPI
	GetKubeconfig(ctx context.Context, values *types.Values) (*capiYaml.InitFile, error)
}
