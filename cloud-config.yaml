## template: jinja
#cloud-config

write_files:
  - path: /var/lib/rancher/k3s/server/manifests/cert-manager.yaml
    content: |
      ---
      apiVersion: helm.cattle.io/v1
      kind: HelmChart
      metadata:
        name: cert-manager
        namespace: kube-system
      spec:
        repo: https://charts.jetstack.io
        chart: cert-manager
        targetNamespace: cert-manager
        createNamespace: true
        valuesContent: |-
          installCRDs: true
  - path: /var/lib/rancher/k3s/server/manifests/capi-operator.yaml
    content: |
      ---
      apiVersion: v1
      kind: Namespace
      metadata:
        name: capi-operator-system
      ---
      apiVersion: helm.cattle.io/v1
      kind: HelmChart
      metadata:
        name: capi-operator
        namespace: capi-operator-system
      spec:
        repo: https://kubernetes-sigs.github.io/cluster-api-operator
        chart: cluster-api-operator
        targetNamespace: capi-operator-system
        createNamespace: true
        valuesContent: |-
          core: cluster-api
          addon: helm
          manager:
            featureGates:
              core:
                ClusterResourceSet: true
                ClusterTopology: true

  - path: /var/lib/rancher/k3s/server/manifests/capi-k3s.yaml
    content: |
      ---
      apiVersion: v1
      kind: Namespace
      metadata:
        name: capi-k3s-bootstrap-system
      ---
      apiVersion: v1
      kind: Namespace
      metadata:
        name: capi-k3s-control-plane-system
      ---
      apiVersion: operator.cluster.x-k8s.io/v1alpha2
      kind: BootstrapProvider
      metadata:
        name: k3s
        namespace: capi-k3s-bootstrap-system
      spec:
        fetchConfig:
          url: https://github.com/k3s-io/cluster-api-k3s/releases/latest/bootstrap-components.yaml
      ---
      apiVersion: operator.cluster.x-k8s.io/v1alpha2
      kind: ControlPlaneProvider
      metadata:
        name: k3s
        namespace: capi-k3s-control-plane-system
      spec:
        fetchConfig:
          url: https://github.com/k3s-io/cluster-api-k3s/releases/latest/control-plane-components.yaml

  - path: /var/lib/rancher/k3s/server/manifests/capi-linode.yaml
    content: |
      ---
      apiVersion: v1
      kind: Namespace
      metadata:
        name: capl-system
      ---
      apiVersion: v1
      kind: Secret
      metadata:
        name: capl-variables
        namespace: capl-system
      type: Opaque
      stringData:
        LINODE_TOKEN: ${LINODE_TOKEN}
      ---
      apiVersion: operator.cluster.x-k8s.io/v1alpha2
      kind: InfrastructureProvider
      metadata:
        name: linode
        namespace: capl-system
      spec:
        fetchConfig:
          url: https://github.com/linode/cluster-api-provider-linode/releases/latest/infrastructure-components.yaml
        configSecret:
          name: capl-variables

  - path: /var/lib/rancher/k3s/server/manifests/k3s-cilium-config.yaml
    content: |
      apiVersion: helm.cattle.io/v1
      kind: HelmChart
      metadata:
        name: cilium
        namespace: kube-system
      spec:
        targetNamespace: kube-system
        version: 1.15.0
        chart: cilium
        repo: https://helm.cilium.io/
        bootstrap: true
        valuesContent: |-
          bgpControlPlane:
            enabled: true
          ipam:
            mode: kubernetes
          k8s:
            requireIPv4PodCIDR: true
          hubble:
            relay:
              enabled: true
            ui:
              enabled: true

  - path: /etc/rancher/k3s/config.yaml
    owner: root:root
    permissions: '0640'
    content: |
      cluster-init: true
      flannel-backend: none
      disable-network-policy: true
      kube-apiserver-arg:
      - anonymous-auth=true
      - tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384
      node-name: '{{ ds.meta_data.label }}'
      tls-san:
      - ${NB_IP}
      
  - path: /var/lib/rancher/k3s/server/manifests/capi-pivot-machine.yaml
    content: |
      ---
      apiVersion: cluster.x-k8s.io/v1beta1
      kind: Machine
      metadata:
        annotations:
          cluster.x-k8s.io/paused: "true"
        labels:
          cluster.x-k8s.io/cluster-name: test-k3s
          cluster.x-k8s.io/control-plane: true
        name: capi-bootstrap-1
        namespace: default
      spec:
        bootstrap:
          configRef: k3sconfig-dummy
          dataSecretName: linode-test-k3s-crs-0
        clusterName: test-k3s
        providerID: linode://{{ ds.meta_data.id }}
      ---
      apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
      kind: KThreesConfig
      metadata:
        labels:
          cluster.x-k8s.io/cluster-name: test-k3s
          cluster.x-k8s.io/control-plane: 
        name: k3sconfig-dummy
        namespace: default
      spec:
      ---
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      kind: LinodeMachine
      metadata:
        labels:
          cluster.x-k8s.io/cluster-name: test-k3s
          cluster.x-k8s.io/control-plane: true
          cluster.x-k8s.io/control-plane-name:
        name: capi-bootstrap-1
        namespace: default
      spec:
        image: linode/ubuntu22.04
        instanceID: "{{ ds.meta_data.id }}"
        providerID: "linode://{{ ds.meta_data.id }}"
        region: {{ ds.meta_data.region }}
        type: g6-standard-6
  - path: /var/lib/rancher/k3s/server/manifests/capi-pivot-k3s.yaml
    owner: root:root
    content: |
      apiVersion: v1
      kind: Secret
      metadata:
        labels:
          clusterctl.cluster.x-k8s.io/move: "true"
        name: test-k3s-credentials
        namespace: default
      stringData:
        apiToken: ${LINODE_TOKEN}
      ---
      apiVersion: v1
      kind: Secret
      metadata:
        name: linode-test-k3s-crs-0
        namespace: default
      stringData:
        linode-token-region.yaml: |-
          kind: Secret
          apiVersion: v1
          metadata:
            name: linode-token-region
            namespace: kube-system
          stringData:
            apiToken: ${LINODE_TOKEN}
            region: {{ ds.meta_data.region }}
      ---
      apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
      kind: KThreesConfigTemplate
      metadata:
        name: test-k3s-md-0
        namespace: default
      spec:
        template:
          spec:
            agentConfig:
              nodeName: '{{ ds.meta_data.label }}'
            preK3sCommands:
            - |
              mkdir -p /etc/rancher/k3s/config.yaml.d/
              echo "node-ip: $(ip a s eth1 |grep 'inet ' |cut -d' ' -f6|cut -d/ -f1)" >> /etc/rancher/k3s/config.yaml.d/capi-config.yaml
            - sed -i '/swap/d' /etc/fstab
            - swapoff -a
            - hostnamectl set-hostname '{{ ds.meta_data.label }}' && hostname -F /etc/hostname
      ---
      apiVersion: cluster.x-k8s.io/v1beta1
      kind: Cluster
      metadata:
        labels:
          cluster: test-k3s
        name: test-k3s
        namespace: default
      spec:
        clusterNetwork:
          pods:
            cidrBlocks:
            - 10.192.0.0/10
        controlPlaneRef:
          apiVersion: controlplane.cluster.x-k8s.io/v1beta1
          kind: KThreesControlPlane
          name: test-k3s-control-plane
        infrastructureRef:
          apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
          kind: LinodeCluster
          name: test-k3s
      ---
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KThreesControlPlane
      metadata:
        annotations:
          cluster.x-k8s.io/paused: "true"
        name: test-k3s-control-plane
        namespace: default
      spec:
        infrastructureTemplate:
          apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
          kind: LinodeMachineTemplate
          name: test-k3s-control-plane
        kthreesConfigSpec:
          agentConfig:
            nodeName: '{{ ds.meta_data.label }}'
          files:
          - content: |
              flannel-backend: none
              disable-network-policy: true
            owner: root:root
            path: /etc/rancher/k3s/config.yaml.d/capi-config.yaml
          - content: |-
              apiVersion: helm.cattle.io/v1
              kind: HelmChart
              metadata:
                namespace: kube-system
                name: ccm-linode
              spec:
                targetNamespace: kube-system
                version: v0.4.4
                chart: ccm-linode
                repo: https://linode.github.io/linode-cloud-controller-manager/
                bootstrap: true
                valuesContent: |-
                  routeController:
                    vpcName: test-k3s
                    clusterCIDR: 10.0.0.0/8
                    configureCloudRoutes: true
                  secretRef:
                    name: "linode-token-region"
                  nodeSelector:
                    node-role.kubernetes.io/control-plane: "true"
                  owner: root:root
                  path: /var/lib/rancher/k3s/server/manifests/linode-ccm.yaml
            owner: root:root
            path: /var/lib/rancher/k3s/server/manifests/linode-ccm.yaml
          - contentFrom:
              secret:
                key: linode-token-region.yaml
                name: linode-test-k3s-crs-0
            owner: root:root
            path: /var/lib/rancher/k3s/server/manifests/linode-token-region.yaml
          - content: |-
              apiVersion: helm.cattle.io/v1
              kind: HelmChart
              metadata:
                name: cilium
                namespace: kube-system
              spec:
                targetNamespace: kube-system
                version: 1.15.0
                chart: cilium
                repo: https://helm.cilium.io/
                bootstrap: true
                valuesContent: |-
                  bgpControlPlane:
                    enabled: true
                  ipam:
                    mode: kubernetes
                  k8s:
                    requireIPv4PodCIDR: true
                  hubble:
                    relay:
                      enabled: true
                    ui:
                      enabled: true
            owner: root:root
            path: /var/lib/rancher/k3s/server/manifests/k3s-cilium-config.yaml
            permissions: "0640"
          preK3sCommands:
          - |
            echo "node-ip: $(ip a s eth1 |grep 'inet ' |cut -d' ' -f6|cut -d/ -f1)" >> /etc/rancher/k3s/config.yaml.d/capi-config.yaml
          - sed -i '/swap/d' /etc/fstab
          - swapoff -a
          - hostnamectl set-hostname '{{ ds.meta_data.label }}' && hostname -F /etc/hostname
          serverConfig:
            disableComponents:
            - servicelb
            - traefik
        replicas: 1
        version: v1.29.1+k3s2
      ---
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      kind: LinodeCluster
      metadata:
        name: test-k3s
        namespace: default
      spec:
        credentialsRef:
          name: test-k3s-credentials
        region: {{ ds.meta_data.region }}
        controlPlaneEndpoint:
          host: ${NB_IP}
          port: ${NB_PORT}
        network:
          loadBalancerType: NodeBalancer
          nodeBalancerConfigID: ${NB_CONFIG_ID}
          nodeBalancerID: ${NB_ID}
      ---
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha1
      kind: LinodeMachineTemplate
      metadata:
        name: test-k3s-control-plane
        namespace: default
      spec:
        template:
          spec:
            authorizedKeys: null
            image: linode/ubuntu22.04
            interfaces:
            - primary: true
              purpose: public
            region: {{ ds.meta_data.region }}
            type: g6-standard-4
        paused: true

hostname: '{{ ds.meta_data.label }}'
runcmd:
  - curl -sfL https://get.k3s.io | sh -
  - alias k="k3s kubectl"
